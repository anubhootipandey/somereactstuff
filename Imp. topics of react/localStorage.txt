<-----------------------------------------------*****LocalStorage*****--------------------------------------------------->
--------------------------------------------------------------------------------------------------------------------------------

Local Storage--
---Local storage is a useful feature for storing data locally in a web browser. It can be used to persist data across 
page refreshes and browser sessions, and is particularly useful for storing small amounts of data that does not need 
to be synced with a server.
---Local storage is a feature of web browsers that allows you to store data locally within the user's browser. 
This data is stored as key-value pairs, similar to an object, and is persisted even when the user closes the browser 
or navigates to a new page.

------------------------------------------------------------------------------------------------------------------------------

# Reading and Writing Data-----
To read and write data to local storage, you can use the localStorage global object provided by the browser. 
This object has the following methods:

a-localStorage.setItem(key, value): Stores a value in local storage under the specified key.
b-localStorage.getItem(key): Retrieves the value stored under the specified key.
c-localStorage.removeItem(key): Removes the value stored under the specified key.
d-localStorage.clear(): Removes all values from local storage.

Here is an example of how you might use these methods to store and retrieve a value in local storage:
// Store a value in local storage
localStorage.setItem('myKey', 'myValue');

// Retrieve the value from local storage
const value = localStorage.getItem('myKey');
console.log(value); // 'myValue'

// Remove the value from local storage
localStorage.removeItem('myKey');

// Clear all values from local storage
localStorage.clear();

------------------------------------------------------------------------------------------------------------------------------

# Working with Objects and Arrays
Since local storage only stores strings, you will need to use JSON.stringify and JSON.parse to store and retrieve objects 
and arrays. Here is an example of how you might store and retrieve an object in local storage:

-----// Store an object in local storage
const user = { name: 'John', age: 30 };
localStorage.setItem('user', JSON.stringify(user));

-----// Retrieve the object from local storage
const storedUser = JSON.parse(localStorage.getItem('user'));
console.log(storedUser); // { name: 'John', age: 30 }

------------------------------------------------------------------------------------------------------------------------------

# Limitations---->
There are a few limitations to be aware of when using local storage:
a-Local storage is limited to 5MB of data per domain.
b-Local storage is vulnerable to cross-site scripting (XSS) attacks.
c-Local storage is not accessible from other domains.

------------------------------------------------------------------------------------------------------------------------------

# Security
Ensuring the security of data stored in local storage can be achieved through a combination of techniques:

1.Encrypting sensitive data: Before storing sensitive data in local storage, it should be encrypted using a secure 
encryption algorithm such as AES or RSA. This way, even if an attacker gains access to the data, they will not be 
able to read it without the decryption key.
2.Using a secure web API: To ensure that the data stored in local storage is secure, it should be transmitted to and 
from a secure web API using HTTPS.
3.Validating user input: It's important to validate user input before storing it in local storage. This can help 
prevent malicious code from being injected and executed in the browser.
4.Using a Content Security Policy(CSP): A Content Security Policy (CSP) is a security feature that helps to detect 
and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks.
5.Using a browser extension or add-on: Some browser extensions or add-ons can help you secure your data stored in 
local storage by encrypting it and requiring a password to access it.
6.Limiting the scope of the data: Limiting the scope of the data stored in local storage can help minimise the 
potential impact of an attack. For example, storing only user preferences instead of sensitive personal information.

--------------------------------------------------------------------------------------------------------------------------------

# Browser compatibility
Handling browser compatibility when working with local storage can be achieved through a combination of techniques:

1.Feature detection: Before using the local storage API, it's important to check if the browser supports it. This can 
be done by checking for the existence of the localStorage object in the browser's global scope.

Example 3: localStorage detection

if (typeof(Storage) !== "undefined") {
  // local storage is supported
} else {
  // local storage is not supported
}

2.Fallback options: If the browser does not support local storage, you can provide a fallback option such as using 
cookies or an in-memory object.
3.Monitoring browser updates: As new browser versions are released, it's important to keep an eye on their local 
storage support and ensure that your web application is compatible with them.

--------------------------------------------------------------------------------------------------------------------------------

# Data expiration--
You can set an expiration time for the data stored in local storage. This can be done by storing a timestamp 
along with the data, and then checking it every time the data is accessed. If the data is expired, it can be removed from the local storage.

Example 4: setting expiration time

const expiration = 60 * 60 * 1000; // 1 hour
localStorage.setItem('key', JSON.stringify({data: 'value', timestamp: Date.now() + expiration}));
...
const data = JSON.parse(localStorage.getItem('key'));
if (data && data.timestamp < Date.now()) {
  localStorage.removeItem('key');
}

---Clearing on logout or session end: Clearing the data when the user logs out or the session ends can be an effective 
way to handle data expiration or removal from local storage.

--------------------------------------------------------------------------------------------------------------------------------

# Login example
One example of using local storage in a React app is to store a user's login session so that they can stay logged 
in even after refreshing the page or closing the browser.

In the login component, when the user submits their credentials, the app can use the localStorage.setItem() method 
to store the user's session token.

---Example 1: handleLogin method

handleLogin = (event) => {
  event.preventDefault();
  // authenticate user
  if (authenticated) {
    localStorage.setItem('session_token', user.session_token);
  }
}

Then, in a higher-order component that wraps around protected routes, the app can check for the presence of the 
session token in local storage and redirect the user to the login page if it is not found.

---Example 2: PrivateRoute

Functional
Class
const PrivateRoute = ({ component: Component, ...rest }) => {
  const session_token = localStorage.getItem('session_token');
  if (!session_token) {
    return <Redirect to='/login' />
  }
  return <Route {...rest} render={(props) => <Component {...props} />} />
}

When the user logs out, the app can use the localStorage.removeItem() method to clear the session token from local storage.

---Example 3: handleLogout method

handleLogout = () => {
  localStorage.removeItem('session_token');
  this.props.history.push('/login');
}

It should be noted that using localStorage for authentication may not be suitable for all cases, as it can be 
easily accessed by malicious actors.

--------------------------------------------------------------------------------------------------------------------------------

# Theme change
Another example of using local storage in a React app is to store user preferences. For example, if a music streaming 
app had a feature that allowed users to change the theme of the app between light and dark mode, the app could use 
local storage to remember the user's preference even after they close the app or refresh the page.

In the settings component, the app can use the localStorage.setItem() method to store the user's preference when 
they change the theme:

Example 1: handleThemeChange method

handleThemeChange = (event) => {
  const theme = event.target.value;
  localStorage.setItem('theme', theme);
  this.setState({ theme });
}

Then, in the App component, the app can check for the presence of the theme preference in local storage and use it to 
determine which theme to render:

Example 2: App component

Functional
Class
const App = () => {
  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light');

  return (
    <div className={`App ${theme}`}>
      {/* ... */}
    </div>
  );
}

When the user clears their browser data, the app can use the localStorage.removeItem() method to clear the theme 
preference from local storage.

Example 3: handleClearData method

handleClearData = () => {
  localStorage.removeItem('theme');
}

--------------------------------------------------------------------------------------------------------------------------------





